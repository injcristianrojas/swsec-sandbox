<?php
class MySQLHandler {
	
	/**************************/
	/* Database Configuration */
	/**************************/
	/* NOTE: On Samurai, the $dbpass password is "samurai" rather than blank.
	 * If there is any problem connecting, it is almost always one of these
	 * values.
	 */	
	static protected $mMySQLDatabaseHost = "localhost";
	static protected $mMySQLDatabaseUsername = "root";
	static protected $mMySQLDatabasePassword = "";
	static protected $mMySQLDatabaseName = "owasp10";
		
	/* ------------------------------------------
 	 * OBJECT PROPERTIES
 	 * ------------------------------------------ */	
	//default insecure: no output encoding.
	protected $encodeOutput = FALSE;
	protected $stopSQLInjection = FALSE;
	protected $mSecurityLevel = 0;
	protected $ESAPI = null;
	protected $Encoder = null;
	
	/* Helper Objects */
	protected $mCustomErrorHandler = null;
	protected $mLogHandler = null;
	
	/* MySQL Object */
	protected $mMySQLConnection = null;

	/* ------------------------------------------
 	 * STATIC PROPERTIES
 	 * ------------------------------------------ */
	public static $mDatabaseAvailableMessage = "";
		
	/* ------------------------------------------
 	 * PRIVATE METHODS
 	 * ------------------------------------------ */
	private function doSetSecurityLevel($pSecurityLevel){
		$this->mSecurityLevel = $pSecurityLevel;
		
		switch ($this->mSecurityLevel){
	   		case "0": // This code is insecure, we are not encoding output
			case "1": // This code is insecure, we are not encoding output
				$this->encodeOutput = FALSE;
				$this->stopSQLInjection = FALSE;
	   		break;
		    		
			case "2":
			case "3":
			case "4":
	   		case "5": // This code is fairly secure
	  			// If we are secure, then we encode all output.
	   			$this->encodeOutput = TRUE;
	   			$this->stopSQLInjection = TRUE;
	   		break;
	   	}// end switch		
	}// end function

	private function doOpenDatabaseConnection(){
		try{
			//$this->mMySQLConnection = new mysqli(self::$mMySQLDatabaseHost, self::$mMySQLDatabaseUsername, self::$mMySQLDatabasePassword, self::$mMySQLDatabaseName);
			$this->mMySQLConnection = new mysqli(self::$mMySQLDatabaseHost, self::$mMySQLDatabaseUsername, self::$mMySQLDatabasePassword);
			if (strlen($lMySQLConnection->connect_error) > 0) {
	   		   	throw (new Exception("Error connecting to MySQL database. Connection error: ".$this->mMySQLConnection->connect_errorno." - ".$this->mMySQLConnection->connect_error." Error: ".$this->mMySQLConnection->errorno." - ".$this->mMySQLConnection->error, $this->mMySQLConnection->errorno));
		    }// end if
		} catch (Exception $e) {
			throw(new Exception($this->mCustomErrorHandler->getExceptionMessage("CRITICAL. Error attempting to open MySQL connection. Try checking the connection settings in the MySQLHandler.php class file. If there is a problem connecting, usually one of these settings is incorrect (i.e. - username, password, database name). It is also a good idea to make sure the database is running and that the web site (Mutillidae) is allowed to connect. This error was generated by public function __construct().")));
		}// end try		
	}// end function doOpenDatabaseConnection

	private function doCloseDatabaseConnection(){

		try{
			$lResult = $this->mMySQLConnection->close();
			if (!$lResult) {
			   	throw (new Exception("Error executing query. Connection error: ".$this->mMySQLConnection->connect_errorno." - ".$this->mMySQLConnection->connect_error." Error: ".$this->mMySQLConnection->errorno." - ".$this->mMySQLConnection->error, $this->mMySQLConnection->errorno));
			}// end if
		}catch (Exception $e){
			throw(new Exception($this->mCustomErrorHandler->getExceptionMessage($e, "Error attempting to close MySQL connection.")));
		}// end try
		
	}// end public private doCloseDatabaseConnection

	/* ------------------------------------------
 	 * CONSTRUCTOR METHOD
 	 * ------------------------------------------ */
	public function __construct($pPathToESAPI, $pSecurityLevel){
		
		$this->doSetSecurityLevel($pSecurityLevel);
		
		//initialize OWASP ESAPI for PHP
		require_once $pPathToESAPI . 'ESAPI.php';
		$this->ESAPI = new ESAPI($pPathToESAPI . 'ESAPI.xml');
		$this->Encoder = $this->ESAPI->getEncoder();
		 
		/* initialize custom error handler */
	    require_once 'CustomErrorHandler.php';
	    $this->mCustomErrorHandler = new CustomErrorHandler($pPathToESAPI, $pSecurityLevel);
	    
	    $this->doOpenDatabaseConnection();
	}// end function __construct()
	
	/* ------------------------------------------
 	 * PUBLIC METHODS
 	 * ------------------------------------------ */
	public static function databaseAvailable(){
		
		self::$mDatabaseAvailableMessage = "AVAILABLE";
		$lMySQLConnection = null;
		
		try{
			
			$lMySQLConnection = new mysqli(self::$mMySQLDatabaseHost, self::$mMySQLDatabaseUsername, self::$mMySQLDatabasePassword);
			if (strlen($lMySQLConnection->connect_error) > 0) {
				if (substr_count($lMySQLConnection->connect_error, "Unknown database") > 0) {
					self::$mDatabaseAvailableMessage = "<br /><br />Error connecting to MySQL database.<br /><br />Connection error: ".$lMySQLConnection->connect_error."<br /><br />It appears that the database to which Mutillidae is configured to connect has not been created.<br /><br />First, try to reset the database (ResetDB button on menu)<br /><br />Is the database username, password, database name, and database location configured correctly?<br /><br />Note: File /mutillidae/classes/MySQLHandler.php contains the database configuration.<br /><br />";
				}else{ 
					self::$mDatabaseAvailableMessage = "<br /><br />Error connecting to MySQL database.<br /><br />Connection error: ".$lMySQLConnection->connect_error."<br /><br />First, try to reset the database (ResetDB button on menu)<br /><br />Is the database service running?<br /><br />Is the database username, password, database name, and database location configured correctly?<br /><br />Note: File /mutillidae/classes/MySQLHandler.php contains the database configuration.<br /><br />";
				}//end if
	   			throw new Exception(self::$mDatabaseAvailableMessage);
		    }// end if

			if(!$lMySQLConnection->select_db(self::$mMySQLDatabaseName)) {
				self::$mDatabaseAvailableMessage = "<br /><br />Unable to select default database " . self::$mMySQLDatabaseName."<br /><br />Connection error: ".$lMySQLConnection->connect_error."<br /><br />It appears that the database to which Mutillidae is configured to connect has not been created.<br /><br />First, try to reset the database (ResetDB button on menu)<br /><br />Is the database username, password, database name, and database location configured correctly?<br /><br />Note: File /mutillidae/classes/MySQLHandler.php contains the database configuration.<br /><br />";
	   			throw new Exception(self::$mDatabaseAvailableMessage);	   		
			}//end if

			$lResult = $lMySQLConnection->query("SELECT 'test connection';");
			if(!$lResult){
				self::$mDatabaseAvailableMessage = "Failed to execute test query on MySQL database but we appear to be connected " . $lMySQLConnection->error."<br /><br />First, try to reset the database (ResetDB button on menu)<br /><br />Check if the database configuration is correct. If the system made it this far, the username and password are probably correct. Perhaps the database name is wrong.<br /><br />";
	   			throw new Exception(self::$mDatabaseAvailableMessage);	   		
			}// end if

			$lResult = $lMySQLConnection->query("SELECT cid FROM blogs_table;");
			if(!$lResult){
				self::$mDatabaseAvailableMessage = "Failed to execute test query on blogs_table in the MySQL database but we appear to be connected " . $lMySQLConnection->error."<br /><br />First, try to reset the database (ResetDB button on menu)<br /><br />The blogs table should exist in the OWASP10 database if the database configuration is correct. If the system made it this far, the username and password are probably correct. Perhaps the database name is wrong.<br /><br />";
	   			throw new Exception(self::$mDatabaseAvailableMessage);	   		
			}// end if
			
			$lMySQLConnection->close();

		} catch (Exception $e) {
			self::$mDatabaseAvailableMessage = "Failed to connect to MySQL database" . $e->getMessage();
   			throw new Exception(self::$mDatabaseAvailableMessage);	   	
		}// end try

		return TRUE;
		
	} //end	public function databaseAvailable(){

	public function connectToDefaultDatabase(){
		$this->mMySQLConnection->select_db(self::$mMySQLDatabaseName);
	}//end function
	
	public function setSecurityLevel($pSecurityLevel){
		$this->doSetSecurityLevel($pSecurityLevel);
	}// end function
	
	public function getSecurityLevel($pSecurityLevel){
		return $this->mSecurityLevel;
	}// end function
	
	public function openDatabaseConnection(){
		$this->doOpenDatabaseConnection();
	}// end function

	public function escapeDangerousCharacters($pString){
		return $this->mMySQLConnection->real_escape_string($pString);
	}//end function

	public function affected_rows(){
		return $this->mMySQLConnection->affected_rows;
	}//end function
		
	public function executeQuery($pQueryString){
		try {
			$lResult = $this->mMySQLConnection->query($pQueryString);
	
			if (!$lResult) {
		    	throw (new Exception("Error executing query: ".$this->mMySQLConnection->error." (".$this->mMySQLConnection->errorno.")"));
		    }// end if there are no results
		    
		    return $lResult;
		} catch (Exception $e) {
			throw(new Exception($this->mCustomErrorHandler->getExceptionMessage($e, "")));
		}// end function

	}// end public function executeQuery

	public function closeDatabaseConnection(){
		$this->doCloseDatabaseConnection();
	}// end public function closeDatabaseConnection

}// end class